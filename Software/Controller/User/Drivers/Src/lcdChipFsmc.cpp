/**************************************************************
 * @file    lcdChipFsmc.cpp
 * @brief   Lcd chip libraries for FSMC interface.
 * @author  Alzn
 * @date    2022-09-04
 *************************************************************/
#include "lcdChipFsmc.hpp"

namespace Lcd {

/**
 * @brief   Constructor
 * @author  Alzn
 * @date    2022-03-28
 */
LcdChipNT35510::LcdChipNT35510(const ChipInfoFsmc &deviceInfo) {
  const uint32_t bank1BaseAddress = 0x60000000;
  const uint32_t haddrBaseBitsPos = 26;
  mAddrCom = (uint16_t *)(bank1BaseAddress + (static_cast<size_t>(deviceInfo.chipSelect) << haddrBaseBitsPos));
  mAddrData = mAddrCom;
  mAddrData = (uint16_t *)(reinterpret_cast<size_t>(mAddrData) | 0x01 << (static_cast<size_t>(deviceInfo.regSelect) + 1)); // 16bit数据线的地址需要左移1位
  mResetPin = deviceInfo.resetPin;
}

/**
 * @brief   Initialize chip NT35510.
 * @author  Alzn
 * @date    2022-03-28
 */
void LcdChipNT35510::init(void) {
  if (mResetPin.isValid()) {
    mResetPin.write(Gpio::Reset);
    HAL_Delay(1);
    mResetPin.write(Gpio::Set);
  }
  HAL_Delay(50);
  writeReg(0xF000, 0x55);
  writeReg(0xF001, 0xAA);
  writeReg(0xF002, 0x52);
  writeReg(0xF003, 0x08);
  writeReg(0xF004, 0x01);

  writeReg(0xB600, 0x34);
  writeReg(0xB601, 0x34);
  writeReg(0xB602, 0x34);

  writeReg(0xB000, 0x0D);
  writeReg(0xB001, 0x0D);
  writeReg(0xB002, 0x0D);

  writeReg(0xB700, 0x24);
  writeReg(0xB701, 0x24);
  writeReg(0xB702, 0x24);

  writeReg(0xB100, 0x0D);
  writeReg(0xB101, 0x0D);
  writeReg(0xB102, 0x0D);

  writeReg(0xB800, 0x24);
  writeReg(0xB801, 0x24);
  writeReg(0xB802, 0x24);

  writeReg(0xB200, 0x00);

  writeReg(0xB900, 0x24);
  writeReg(0xB901, 0x24);
  writeReg(0xB902, 0x24);

  writeReg(0xB300, 0x05);
  writeReg(0xB301, 0x05);
  writeReg(0xB302, 0x05);

  writeReg(0xBA00, 0x34);
  writeReg(0xBA01, 0x34);
  writeReg(0xBA02, 0x34);

  writeReg(0xB500, 0x0B);
  writeReg(0xB501, 0x0B);
  writeReg(0xB502, 0x0B);

  writeReg(0xBC00, 0X00);
  writeReg(0xBC01, 0xA3);
  writeReg(0xBC02, 0X00);

  writeReg(0xBD00, 0x00);
  writeReg(0xBD01, 0xA3);
  writeReg(0xBD02, 0x00);

  writeReg(0xBE00, 0x00);
  writeReg(0xBE01, 0x63);

  writeReg(0xD100, 0x00);
  writeReg(0xD101, 0x37);
  writeReg(0xD102, 0x00);
  writeReg(0xD103, 0x52);
  writeReg(0xD104, 0x00);
  writeReg(0xD105, 0x7B);
  writeReg(0xD106, 0x00);
  writeReg(0xD107, 0x99);
  writeReg(0xD108, 0x00);
  writeReg(0xD109, 0xB1);
  writeReg(0xD10A, 0x00);
  writeReg(0xD10B, 0xD2);
  writeReg(0xD10C, 0x00);
  writeReg(0xD10D, 0xF6);
  writeReg(0xD10E, 0x01);
  writeReg(0xD10F, 0x27);
  writeReg(0xD110, 0x01);
  writeReg(0xD111, 0x4E);
  writeReg(0xD112, 0x01);
  writeReg(0xD113, 0x8C);
  writeReg(0xD114, 0x01);
  writeReg(0xD115, 0xBE);
  writeReg(0xD116, 0x02);
  writeReg(0xD117, 0x0B);
  writeReg(0xD118, 0x02);
  writeReg(0xD119, 0x48);
  writeReg(0xD11A, 0x02);
  writeReg(0xD11B, 0x4A);
  writeReg(0xD11C, 0x02);
  writeReg(0xD11D, 0x7E);
  writeReg(0xD11E, 0x02);
  writeReg(0xD11F, 0xBC);
  writeReg(0xD120, 0x02);
  writeReg(0xD121, 0xE1);
  writeReg(0xD122, 0x03);
  writeReg(0xD123, 0x10);
  writeReg(0xD124, 0x03);
  writeReg(0xD125, 0x31);
  writeReg(0xD126, 0x03);
  writeReg(0xD127, 0x5A);
  writeReg(0xD128, 0x03);
  writeReg(0xD129, 0x73);
  writeReg(0xD12A, 0x03);
  writeReg(0xD12B, 0x94);
  writeReg(0xD12C, 0x03);
  writeReg(0xD12D, 0x9F);
  writeReg(0xD12E, 0x03);
  writeReg(0xD12F, 0xB3);
  writeReg(0xD130, 0x03);
  writeReg(0xD131, 0xB9);
  writeReg(0xD132, 0x03);
  writeReg(0xD133, 0xC1);
  writeReg(0xD200, 0x00);
  writeReg(0xD201, 0x37);
  writeReg(0xD202, 0x00);
  writeReg(0xD203, 0x52);
  writeReg(0xD204, 0x00);
  writeReg(0xD205, 0x7B);
  writeReg(0xD206, 0x00);
  writeReg(0xD207, 0x99);
  writeReg(0xD208, 0x00);
  writeReg(0xD209, 0xB1);
  writeReg(0xD20A, 0x00);
  writeReg(0xD20B, 0xD2);
  writeReg(0xD20C, 0x00);
  writeReg(0xD20D, 0xF6);
  writeReg(0xD20E, 0x01);
  writeReg(0xD20F, 0x27);
  writeReg(0xD210, 0x01);
  writeReg(0xD211, 0x4E);
  writeReg(0xD212, 0x01);
  writeReg(0xD213, 0x8C);
  writeReg(0xD214, 0x01);
  writeReg(0xD215, 0xBE);
  writeReg(0xD216, 0x02);
  writeReg(0xD217, 0x0B);
  writeReg(0xD218, 0x02);
  writeReg(0xD219, 0x48);
  writeReg(0xD21A, 0x02);
  writeReg(0xD21B, 0x4A);
  writeReg(0xD21C, 0x02);
  writeReg(0xD21D, 0x7E);
  writeReg(0xD21E, 0x02);
  writeReg(0xD21F, 0xBC);
  writeReg(0xD220, 0x02);
  writeReg(0xD221, 0xE1);
  writeReg(0xD222, 0x03);
  writeReg(0xD223, 0x10);
  writeReg(0xD224, 0x03);
  writeReg(0xD225, 0x31);
  writeReg(0xD226, 0x03);
  writeReg(0xD227, 0x5A);
  writeReg(0xD228, 0x03);
  writeReg(0xD229, 0x73);
  writeReg(0xD22A, 0x03);
  writeReg(0xD22B, 0x94);
  writeReg(0xD22C, 0x03);
  writeReg(0xD22D, 0x9F);
  writeReg(0xD22E, 0x03);
  writeReg(0xD22F, 0xB3);
  writeReg(0xD230, 0x03);
  writeReg(0xD231, 0xB9);
  writeReg(0xD232, 0x03);
  writeReg(0xD233, 0xC1);
  writeReg(0xD300, 0x00);
  writeReg(0xD301, 0x37);
  writeReg(0xD302, 0x00);
  writeReg(0xD303, 0x52);
  writeReg(0xD304, 0x00);
  writeReg(0xD305, 0x7B);
  writeReg(0xD306, 0x00);
  writeReg(0xD307, 0x99);
  writeReg(0xD308, 0x00);
  writeReg(0xD309, 0xB1);
  writeReg(0xD30A, 0x00);
  writeReg(0xD30B, 0xD2);
  writeReg(0xD30C, 0x00);
  writeReg(0xD30D, 0xF6);
  writeReg(0xD30E, 0x01);
  writeReg(0xD30F, 0x27);
  writeReg(0xD310, 0x01);
  writeReg(0xD311, 0x4E);
  writeReg(0xD312, 0x01);
  writeReg(0xD313, 0x8C);
  writeReg(0xD314, 0x01);
  writeReg(0xD315, 0xBE);
  writeReg(0xD316, 0x02);
  writeReg(0xD317, 0x0B);
  writeReg(0xD318, 0x02);
  writeReg(0xD319, 0x48);
  writeReg(0xD31A, 0x02);
  writeReg(0xD31B, 0x4A);
  writeReg(0xD31C, 0x02);
  writeReg(0xD31D, 0x7E);
  writeReg(0xD31E, 0x02);
  writeReg(0xD31F, 0xBC);
  writeReg(0xD320, 0x02);
  writeReg(0xD321, 0xE1);
  writeReg(0xD322, 0x03);
  writeReg(0xD323, 0x10);
  writeReg(0xD324, 0x03);
  writeReg(0xD325, 0x31);
  writeReg(0xD326, 0x03);
  writeReg(0xD327, 0x5A);
  writeReg(0xD328, 0x03);
  writeReg(0xD329, 0x73);
  writeReg(0xD32A, 0x03);
  writeReg(0xD32B, 0x94);
  writeReg(0xD32C, 0x03);
  writeReg(0xD32D, 0x9F);
  writeReg(0xD32E, 0x03);
  writeReg(0xD32F, 0xB3);
  writeReg(0xD330, 0x03);
  writeReg(0xD331, 0xB9);
  writeReg(0xD332, 0x03);
  writeReg(0xD333, 0xC1);

  writeReg(0xD400, 0x00);
  writeReg(0xD401, 0x37);
  writeReg(0xD402, 0x00);
  writeReg(0xD403, 0x52);
  writeReg(0xD404, 0x00);
  writeReg(0xD405, 0x7B);
  writeReg(0xD406, 0x00);
  writeReg(0xD407, 0x99);
  writeReg(0xD408, 0x00);
  writeReg(0xD409, 0xB1);
  writeReg(0xD40A, 0x00);
  writeReg(0xD40B, 0xD2);
  writeReg(0xD40C, 0x00);
  writeReg(0xD40D, 0xF6);
  writeReg(0xD40E, 0x01);
  writeReg(0xD40F, 0x27);
  writeReg(0xD410, 0x01);
  writeReg(0xD411, 0x4E);
  writeReg(0xD412, 0x01);
  writeReg(0xD413, 0x8C);
  writeReg(0xD414, 0x01);
  writeReg(0xD415, 0xBE);
  writeReg(0xD416, 0x02);
  writeReg(0xD417, 0x0B);
  writeReg(0xD418, 0x02);
  writeReg(0xD419, 0x48);
  writeReg(0xD41A, 0x02);
  writeReg(0xD41B, 0x4A);
  writeReg(0xD41C, 0x02);
  writeReg(0xD41D, 0x7E);
  writeReg(0xD41E, 0x02);
  writeReg(0xD41F, 0xBC);
  writeReg(0xD420, 0x02);
  writeReg(0xD421, 0xE1);
  writeReg(0xD422, 0x03);
  writeReg(0xD423, 0x10);
  writeReg(0xD424, 0x03);
  writeReg(0xD425, 0x31);
  writeReg(0xD426, 0x03);
  writeReg(0xD427, 0x5A);
  writeReg(0xD428, 0x03);
  writeReg(0xD429, 0x73);
  writeReg(0xD42A, 0x03);
  writeReg(0xD42B, 0x94);
  writeReg(0xD42C, 0x03);
  writeReg(0xD42D, 0x9F);
  writeReg(0xD42E, 0x03);
  writeReg(0xD42F, 0xB3);
  writeReg(0xD430, 0x03);
  writeReg(0xD431, 0xB9);
  writeReg(0xD432, 0x03);
  writeReg(0xD433, 0xC1);

  writeReg(0xD500, 0x00);
  writeReg(0xD501, 0x37);
  writeReg(0xD502, 0x00);
  writeReg(0xD503, 0x52);
  writeReg(0xD504, 0x00);
  writeReg(0xD505, 0x7B);
  writeReg(0xD506, 0x00);
  writeReg(0xD507, 0x99);
  writeReg(0xD508, 0x00);
  writeReg(0xD509, 0xB1);
  writeReg(0xD50A, 0x00);
  writeReg(0xD50B, 0xD2);
  writeReg(0xD50C, 0x00);
  writeReg(0xD50D, 0xF6);
  writeReg(0xD50E, 0x01);
  writeReg(0xD50F, 0x27);
  writeReg(0xD510, 0x01);
  writeReg(0xD511, 0x4E);
  writeReg(0xD512, 0x01);
  writeReg(0xD513, 0x8C);
  writeReg(0xD514, 0x01);
  writeReg(0xD515, 0xBE);
  writeReg(0xD516, 0x02);
  writeReg(0xD517, 0x0B);
  writeReg(0xD518, 0x02);
  writeReg(0xD519, 0x48);
  writeReg(0xD51A, 0x02);
  writeReg(0xD51B, 0x4A);
  writeReg(0xD51C, 0x02);
  writeReg(0xD51D, 0x7E);
  writeReg(0xD51E, 0x02);
  writeReg(0xD51F, 0xBC);
  writeReg(0xD520, 0x02);
  writeReg(0xD521, 0xE1);
  writeReg(0xD522, 0x03);
  writeReg(0xD523, 0x10);
  writeReg(0xD524, 0x03);
  writeReg(0xD525, 0x31);
  writeReg(0xD526, 0x03);
  writeReg(0xD527, 0x5A);
  writeReg(0xD528, 0x03);
  writeReg(0xD529, 0x73);
  writeReg(0xD52A, 0x03);
  writeReg(0xD52B, 0x94);
  writeReg(0xD52C, 0x03);
  writeReg(0xD52D, 0x9F);
  writeReg(0xD52E, 0x03);
  writeReg(0xD52F, 0xB3);
  writeReg(0xD530, 0x03);
  writeReg(0xD531, 0xB9);
  writeReg(0xD532, 0x03);
  writeReg(0xD533, 0xC1);

  writeReg(0xD600, 0x00);
  writeReg(0xD601, 0x37);
  writeReg(0xD602, 0x00);
  writeReg(0xD603, 0x52);
  writeReg(0xD604, 0x00);
  writeReg(0xD605, 0x7B);
  writeReg(0xD606, 0x00);
  writeReg(0xD607, 0x99);
  writeReg(0xD608, 0x00);
  writeReg(0xD609, 0xB1);
  writeReg(0xD60A, 0x00);
  writeReg(0xD60B, 0xD2);
  writeReg(0xD60C, 0x00);
  writeReg(0xD60D, 0xF6);
  writeReg(0xD60E, 0x01);
  writeReg(0xD60F, 0x27);
  writeReg(0xD610, 0x01);
  writeReg(0xD611, 0x4E);
  writeReg(0xD612, 0x01);
  writeReg(0xD613, 0x8C);
  writeReg(0xD614, 0x01);
  writeReg(0xD615, 0xBE);
  writeReg(0xD616, 0x02);
  writeReg(0xD617, 0x0B);
  writeReg(0xD618, 0x02);
  writeReg(0xD619, 0x48);
  writeReg(0xD61A, 0x02);
  writeReg(0xD61B, 0x4A);
  writeReg(0xD61C, 0x02);
  writeReg(0xD61D, 0x7E);
  writeReg(0xD61E, 0x02);
  writeReg(0xD61F, 0xBC);
  writeReg(0xD620, 0x02);
  writeReg(0xD621, 0xE1);
  writeReg(0xD622, 0x03);
  writeReg(0xD623, 0x10);
  writeReg(0xD624, 0x03);
  writeReg(0xD625, 0x31);
  writeReg(0xD626, 0x03);
  writeReg(0xD627, 0x5A);
  writeReg(0xD628, 0x03);
  writeReg(0xD629, 0x73);
  writeReg(0xD62A, 0x03);
  writeReg(0xD62B, 0x94);
  writeReg(0xD62C, 0x03);
  writeReg(0xD62D, 0x9F);
  writeReg(0xD62E, 0x03);
  writeReg(0xD62F, 0xB3);
  writeReg(0xD630, 0x03);
  writeReg(0xD631, 0xB9);
  writeReg(0xD632, 0x03);
  writeReg(0xD633, 0xC1);

  writeReg(0xF000, 0x55);
  writeReg(0xF001, 0xAA);
  writeReg(0xF002, 0x52);
  writeReg(0xF003, 0x08);
  writeReg(0xF004, 0x00);

  writeReg(0xB000, 0x08);
  writeReg(0xB001, 0x05);
  writeReg(0xB002, 0x02);
  writeReg(0xB003, 0x05);
  writeReg(0xB004, 0x02);
  writeReg(0xB600, 0x08);
  writeReg(0xB500, 0x50);

  writeReg(0xB700, 0x00);
  writeReg(0xB701, 0x00);

  writeReg(0xB800, 0x01);
  writeReg(0xB801, 0x05);
  writeReg(0xB802, 0x05);
  writeReg(0xB803, 0x05);

  writeReg(0xBC00, 0x00);
  writeReg(0xBC01, 0x00);
  writeReg(0xBC02, 0x00);

  writeReg(0xCC00, 0x03);
  writeReg(0xCC01, 0x00);
  writeReg(0xCC02, 0x00);

  writeReg(0xBD00, 0x01);
  writeReg(0xBD01, 0x84);
  writeReg(0xBD02, 0x07);
  writeReg(0xBD03, 0x31);
  writeReg(0xBD04, 0x00);

  writeReg(0xBA00, 0x01);

  writeReg(0xFF00, 0xAA);
  writeReg(0xFF01, 0x55);
  writeReg(0xFF02, 0x25);
  writeReg(0xFF03, 0x01);

  writeReg(0x5500, 0x01);

  writeReg(0x3500, 0x00);
  writeReg(0x3600, 0x60);
  writeReg(0x3a00, 0x55);
  writeCom(0x1100);
  HAL_Delay(120);
  writeCom(0x2900);
  writeCom(0x2C00);
}

/**
 * @brief   Set draw range For NT35510
 * @author  Alzn
 * @date    2022-03-28
 * @param   x1 Left
 * @param   x2 Right
 * @param   y1 Top
 * @param   y2 Buttom
 */
void LcdChipNT35510::setRange(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
  writeReg(0X2A00, x1 >> 8);
  writeReg(0X2A01, x1 & 0XFF);
  writeReg(0X2A02, x2 >> 8);
  writeReg(0X2A03, x2 & 0XFF);

  writeReg(0X2B00, y1 >> 8);
  writeReg(0X2B01, y1 & 0XFF);
  writeReg(0X2B02, y2 >> 8);
  writeReg(0X2B03, y2 & 0XFF);

  writeCom(0x2C00);
}

/**
 * @brief   Set the display orientation for NT35510
 * @author  Alzn
 * @date    2022-03-30
 * @param   deviceInfo Change the dispay orientation will update device information.
 * @param   newOrientation The new orientation you want to change to. @ref DispOrientation
 */
void LcdChipNT35510::setOrientation(DispOrientation newOrientation) {
  switch (newOrientation) {
    case DispOrientation::Horizontal:
      writeReg(0x3600, 0x60);
      break;

    case DispOrientation::Vertical:
      writeReg(0x3600, 0x00);
      break;

    case DispOrientation::HoriWithFlip:
      writeReg(0x3600, 0xA0);
      break;

    case DispOrientation::VertWithFlip:
      writeReg(0x3600, 0xC0);
      break;

    default:
      break;
  }
}

/**
 * @brief   Fast write color data.
 * @author  Alzn
 * @date    2022-09-04
 */
void LcdChipNT35510::fillColor(uint16_t color, size_t num) {
  const int32_t divNum = 4;
  while (num >= divNum) {
    writeData(color);
    writeData(color);
    writeData(color);
    writeData(color);
    num -= divNum;
  }
  switch (num) {
    case 3:
      writeData(color);
    case 2:
      writeData(color);
    case 1:
      writeData(color);
    default:
      break;
  }
}
} // namespace Lcd

/* END OF FILE */